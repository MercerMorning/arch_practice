<?php

namespace App\Infrastructure;

use Closure;
use ReflectionClass;
use ReflectionMethod;
use ReflectionParameter;

class IoC
{
    const GENERATED_PATH = '/app/generated/';

    /**
     * @var $binded Closure[]
     */
    protected $binded = [];

    public function __construct()
    {
        $this->binded['IoC.Register'] = function (array $args) {
            $this->binded[$args[0]] = $args[1];
        };
    }


    public function resolve(string $key, ...$args)
    {
        if (isset($this->binded[$key])) {
            return $this->binded[$key]($args);
        }
    }

    public function generate(string $class)
    {
        $ref = new ReflectionClass($class);
        $interfaceName = array_reverse(explode("\\", $class))[0];
        $className = 'AutoGenerated' . $interfaceName . 'Adapter';
        $class =
            '<?php ' . PHP_EOL . 'class ' . $className . ' implements \\' . $class;
        $body = '';
        $body .=
            'private \\' . IoC::class . ' $container;' . PHP_EOL .
            'private object $object;' . PHP_EOL .
            'public function __construct() {
                $this->container = new ' . IoC::class . '();
            }';
        /**
         * @var $methods ReflectionMethod[]
         */
        $methods = $ref->getMethods();
        foreach ($methods as $method) {
            $methodReturnType = $method->getReturnType()?->getName();
            $methodParametersArray = [];
            $methodParameters = $method->getParameters();
            if ($methodParameters) {
                /**
                 * @var $methods ReflectionParameter[]
                 */
                foreach ($methodParameters as $methodParameter) {
                    $methodParametersArray[] = "\\" . $methodParameter->getType() . ' $' . $methodParameter->getName();
                }
            }
            $methodParameters = implode(', ', $methodParametersArray);
            $methodName = $method->getName();
            $methodBody = PHP_EOL . "public function {$methodName} ({$methodParameters})";
            if ($methodReturnType) {
                $methodBody .= ": \\{$methodReturnType}";
            }
            $methodBody .= "{ return \$this->container->resolve('{$interfaceName}.{$methodName}', \$this->object); }";
            $body .= $methodBody . PHP_EOL;
        }
        $class .= PHP_EOL . '{' . $body . '}';
        $path = self::GENERATED_PATH . $className . '.php';
        file_put_contents($path, $class);
        require_once $path;
    }

}
