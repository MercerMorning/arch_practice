<?php

namespace Tests\Unit\Infrastructure;


use App\Domain\Coordinate;
use App\Domain\MovableInterface;
use App\Domain\TankOperationsMovableInterface;
use App\Infrastructure\InitScopeBasedIoCImplementation;
use App\Infrastructure\InversionOfControlContainer;
use App\Infrastructure\IoC;
use App\Infrastructure\ScopeBasedResolveDependencyStrategy;
use AutoGeneratedTankOperationsMovableInterfaceAdapter;
use PHPUnit\Framework\TestCase;

class InversionOfControlContainerTest extends TestCase
{
    public function testChangingScopes()
    {
        $container = new InversionOfControlContainer();
        InversionOfControlContainer::setInstance($container);
        $command = new InitScopeBasedIoCImplementation();
        $command->execute();

        $scope = clone ScopeBasedResolveDependencyStrategy::$root;

        $container->resolve("IoC.Register", 'scopeTest', function () {
            return 'test';
        })->execute();

        $this->assertSame('test', $container->resolve("scopeTest"));
        $container->resolve("Scopes.New", '1', $scope)->execute();
        $container->resolve("Scopes.Current.Set", '1')->execute();
        $container->resolve("IoC.Register", 'scopeTest', function () {
            return 'test2';
        })->execute();
        $this->assertSame('test2', $container->resolve("scopeTest"));
        $container->resolve("Scopes.Current.Set", 'default')->execute();
        $this->assertSame('test', $container->resolve("scopeTest"));
    }

    public function testAutoGenerating()
    {
        $container = new InversionOfControlContainer();
        InversionOfControlContainer::setInstance($container);
        $command = new InitScopeBasedIoCImplementation();
        $command->execute();

        $container->resolve(
            "IoC.Register",
            'TankOperationsMovableInterface.getPosition',
            function (array $arguments) {
                return $arguments[0]->getPosition();
            })->execute();
        $container->generate(TankOperationsMovableInterface::class);
        $object = $this->createMock(MovableInterface::class);
        $object->method('getPosition')->willReturn(new Coordinate(1, 1));

        $test = new AutoGeneratedTankOperationsMovableInterfaceAdapter($object);
        $this->assertEquals(new Coordinate(1, 1), $test->getPosition());
    }
}